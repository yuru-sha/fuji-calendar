# シンプルな本番用 Dockerfile（モノレポ統合版）
FROM node:18-alpine

# 必要なシステムパッケージをインストール
RUN apk add --no-cache \
    postgresql-client \
    python3 \
    make \
    g++ \
    curl \
    tini

# アプリケーション用ユーザーを作成
RUN addgroup -g 1001 -S nodejs && \
    adduser -S fuji-calendar -u 1001

# 作業ディレクトリを設定
WORKDIR /app

# package.json をコピーして依存関係をインストール
COPY package*.json ./

# ディレクトリ作成と package.json コピー
RUN mkdir -p apps/server packages/types packages/utils packages/shared packages/ui
COPY apps/server/package.json ./apps/server/
COPY packages/types/package.json ./packages/types/
COPY packages/utils/package.json ./packages/utils/
COPY packages/shared/package.json ./packages/shared/
COPY packages/ui/package.json ./packages/ui/

# 依存関係をインストール
RUN npm ci --silent && npm cache clean --force

# 全ソースコードをコピー
COPY . .

# Prisma クライアントを生成
RUN npx prisma generate

# 環境変数設定
ENV NODE_ENV=production
ENV TS_NODE_TRANSPILE_ONLY=true

# ログディレクトリを作成
RUN mkdir -p /app/logs && chown -R fuji-calendar:nodejs /app

# ユーザーを切り替え
USER fuji-calendar

# ポートを公開
EXPOSE 3000

# ヘルスチェック
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# tini を使用してプロセス管理
ENTRYPOINT ["/sbin/tini", "--"]

# サーバーを TypeScript で直接起動（ビルド不要）
CMD ["npx", "ts-node", "--project", "apps/server/tsconfig.json", "apps/server/src/server.ts"]