generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 Int                 @id @default(autoincrement())
  username           String              @unique @db.VarChar(100)
  email              String              @unique @db.VarChar(255)
  passwordHash       String              @map("password_hash") @db.VarChar(255)
  createdAt          DateTime?           @default(dbgenerated("(now() AT TIME ZONE 'Asia/Tokyo'::text)")) @map("created_at") @db.Timestamptz(6)
  last_login         DateTime?           @db.Timestamptz(6)
  failed_login_count Int?                @default(0)
  locked_until       DateTime?           @db.Timestamptz(6)
  location_requests  location_requests[]

  @@index([username], map: "idx_admins_username")
  @@map("admins")
}

model Location {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  prefecture    String         @db.VarChar(100)
  latitude      Decimal        @db.Decimal(10, 8)
  longitude     Decimal        @db.Decimal(11, 8)
  elevation     Decimal        @db.Decimal(8, 2)
  description   String?
  accessInfo    String?        @map("access_info")
  warnings      String?
  fujiAzimuth   Decimal?       @map("fuji_azimuth") @db.Decimal(8, 5)
  fujiElevation Decimal?       @map("fuji_elevation") @db.Decimal(8, 5)
  fujiDistance  Decimal?       @map("fuji_distance") @db.Decimal(10, 3)
  createdAt     DateTime?      @default(dbgenerated("(now() AT TIME ZONE 'Asia/Tokyo'::text)")) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?      @default(dbgenerated("(now() AT TIME ZONE 'Asia/Tokyo'::text)")) @updatedAt @map("updated_at") @db.Timestamptz(6)
  events_cache  events_cache[]

  @@index([latitude, longitude], map: "idx_locations_coords")
  @@index([fujiDistance], map: "idx_locations_fuji_distance")
  @@index([prefecture], map: "idx_locations_prefecture")
  @@map("locations")
}

model events_cache {
  cache_key               String    @id @db.VarChar(255)
  year                    Int
  month                   Int
  day                     Int?
  location_id             Int
  events_data             String
  event_count             Int       @default(0)
  calculation_duration_ms Int?
  created_at              DateTime? @default(dbgenerated("(now() AT TIME ZONE 'Asia/Tokyo'::text)")) @db.Timestamptz(6)
  updated_at              DateTime? @default(dbgenerated("(now() AT TIME ZONE 'Asia/Tokyo'::text)")) @db.Timestamptz(6)
  expires_at              DateTime  @db.Timestamptz(6)
  is_valid                Boolean?  @default(true)
  locations               Location  @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([year, month, day, location_id, is_valid], map: "idx_events_cache_daily")
  @@index([year, month, day], map: "idx_events_cache_date")
  @@index([expires_at], map: "idx_events_cache_expires")
  @@index([location_id], map: "idx_events_cache_location")
  @@index([year, month, is_valid, expires_at], map: "idx_events_cache_monthly")
  @@index([year, month], map: "idx_events_cache_year_month")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model location_requests {
  id                  Int       @id @default(autoincrement())
  name                String    @db.VarChar(255)
  prefecture          String    @db.VarChar(100)
  description         String
  suggested_latitude  Decimal?  @db.Decimal(10, 8)
  suggested_longitude Decimal?  @db.Decimal(11, 8)
  requester_ip        String    @db.Inet
  status              String?   @default("pending") @db.VarChar(20)
  created_at          DateTime? @default(dbgenerated("(now() AT TIME ZONE 'Asia/Tokyo'::text)")) @db.Timestamptz(6)
  processed_at        DateTime? @db.Timestamptz(6)
  processed_by        Int?
  admins              Admin?    @relation(fields: [processed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "idx_location_requests_created")
  @@index([status], map: "idx_location_requests_status")
}

model request_limits {
  ip_address      String   @id @db.Inet
  last_request_at DateTime @db.Timestamptz(6)
  request_count   Int?     @default(1)

  @@index([ip_address], map: "idx_request_limits_ip")
}
