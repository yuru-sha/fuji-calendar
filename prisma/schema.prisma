generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(100)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("admins")
}

model Location {
  id            Int                 @id @default(autoincrement())
  name          String              @db.VarChar(255)
  prefecture    String              @db.VarChar(100)
  latitude      Float
  longitude     Float
  elevation     Float
  description   String?
  accessInfo    String?             @map("access_info")
  fujiAzimuth   Float?              @map("fuji_azimuth")
  fujiElevation Float?              @map("fuji_elevation")
  fujiDistance  Float?              @map("fuji_distance")
  createdAt     DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  parkingInfo   String?             @map("parking_info")
  events        LocationFujiEvent[]

  @@index([fujiAzimuth, fujiElevation])
  @@index([latitude, longitude], map: "idx_locations_coords")
  @@index([prefecture], map: "idx_locations_prefecture")
  @@map("locations")
}

model LocationFujiEvent {
  id               BigInt    @id @default(autoincrement())
  locationId       Int       @map("location_id")
  eventDate        DateTime  @map("event_date") @db.Date
  eventTime        DateTime  @map("event_time") @db.Timestamptz(6)
  azimuth          Float
  altitude         Float
  qualityScore     Float     @default(0.0) @map("quality_score")
  moonPhase        Float?    @map("moon_phase")
  moonIllumination Float?    @map("moon_illumination")
  calculationYear  Int       @map("calculation_year")
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  eventType        EventType @map("event_type")
  accuracy         Accuracy?
  location         Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, eventDate, eventTime, eventType], map: "unique_location_event")
  @@index([locationId, eventDate], map: "idx_location_date")
  @@index([eventDate], map: "idx_event_date")
  @@index([eventType, eventDate], map: "idx_event_type_date")
  @@index([qualityScore(sort: Desc)], map: "idx_quality_score")
  @@map("location_fuji_events")
}

enum EventType {
  diamond_sunrise
  diamond_sunset
  pearl_moonrise
  pearl_moonset
}

enum Accuracy {
  perfect
  excellent
  good
  fair
}
