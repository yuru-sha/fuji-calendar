generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               Int            @id @default(autoincrement())
  username         String         @unique @db.VarChar(50)
  email            String         @unique @db.VarChar(100)
  passwordHash     String         @map("password_hash") @db.VarChar(255)
  role             AdminRole      @default(admin)
  failedLoginCount Int            @default(0) @map("failed_login_count")
  lockedUntil      DateTime?      @map("locked_until") @db.Timestamptz(6)
  lastLoginAt      DateTime?      @map("last_login_at") @db.Timestamptz(6)
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  refreshTokens    RefreshToken[]

  @@index([username])
  @@index([email])
  @@index([isActive])
  @@map("admins")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(1000)
  adminId   Int      @map("admin_id")
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([adminId])
  @@index([expiresAt])
  @@index([isRevoked])
  @@map("refresh_tokens")
}

model Location {
  id               Int                 @id @default(autoincrement())
  name             String              @db.VarChar(255)
  prefecture       String              @db.VarChar(100)
  latitude         Float
  longitude        Float
  elevation        Float
  fujiAzimuth      Float?              @map("fuji_azimuth")
  fujiElevation    Float?              @map("fuji_elevation")
  fujiDistance     Float?              @map("fuji_distance")
  description      String?
  accessInfo       String?             @map("access_info")
  parkingInfo      String?             @map("parking_info")
  measurementNotes String?             @map("measurement_notes")
  createdAt        DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  events           LocationEvent[]

  @@index([fujiAzimuth, fujiElevation])
  @@index([latitude, longitude], map: "idx_locations_coords")
  @@index([prefecture], map: "idx_locations_prefecture")
  @@map("locations")
}

model LocationEvent {
  id               BigInt    @id @default(autoincrement())
  locationId       Int       @map("location_id")
  eventType        EventType @map("event_type")
  eventDate        DateTime  @map("event_date") @db.Date
  eventTime        DateTime  @map("event_time") @db.Timestamptz(6)
  azimuth          Float
  altitude         Float
  accuracy         Accuracy?
  qualityScore     Float     @default(0.0) @map("quality_score")
  moonPhase        Float?    @map("moon_phase")
  moonIllumination Float?    @map("moon_illumination")
  calculationYear  Int       @map("calculation_year")
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  location         Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, eventDate, eventTime, eventType], map: "unique_location_event")
  @@index([locationId, eventDate], map: "idx_location_date")
  @@index([eventDate], map: "idx_event_date")
  @@index([eventType, eventDate], map: "idx_event_type_date")
  @@index([qualityScore(sort: Desc)], map: "idx_quality_score")
  @@map("location_events")
}

enum AdminRole {
  admin
  super
}

enum EventType {
  diamond_sunrise
  diamond_sunset
  pearl_moonrise
  pearl_moonset
}

enum Accuracy {
  perfect
  excellent
  good
  fair
}

model BackgroundJobConfig {
  id          String   @id @db.VarChar(50)
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(500)
  schedule    String   @db.VarChar(50)
  enabled     Boolean  @default(true)
  lastRun     DateTime? @map("last_run") @db.Timestamptz(6)
  nextRun     DateTime? @map("next_run") @db.Timestamptz(6)
  runCount    Int      @default(0) @map("run_count")
  errorCount  Int      @default(0) @map("error_count")
  lastError   String?  @map("last_error") @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("background_job_configs")
}

model SystemSetting {
  id          Int      @id @default(autoincrement())
  settingKey  String   @unique @map("setting_key") @db.VarChar(100)
  settingType String   @map("setting_type") @db.VarChar(20) // 'number', 'string', 'boolean'
  numberValue Float?   @map("number_value")
  stringValue String?  @map("string_value") @db.VarChar(255)
  booleanValue Boolean? @map("boolean_value")
  description String?  @db.Text
  category    String   @db.VarChar(50) // 'astronomical', 'ui', 'performance', etc.
  editable    Boolean  @default(true) // 管理画面で編集可能かどうか
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([category])
  @@index([settingKey])
  @@map("system_settings")
}
