#!/usr/bin/env node

/**
 * Âú∞ÁÇπÂà•ÂØåÂ£´ÁèæË±°„Ç§„Éô„É≥„ÉàÁîüÊàê„Çπ„ÇØ„É™„Éó„ÉàÔºàPostgreSQL + PrismaÁâàÔºâ
 * celestial_orbit_data„Å®locations„Åã„Çâlocation_fuji_events„ÇíÁîüÊàê
 */

const path = require('path');
require('ts-node').register({
  project: path.join(__dirname, '../../../tsconfig.server.json')
});

// „Éó„É≠„Çª„ÇπÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
process.on('SIGINT', async () => {
  console.log('\n‚ö†Ô∏è  Âá¶ÁêÜ„Çí‰∏≠Êñ≠„Åó„Å¶„ÅÑ„Åæ„Åô...');
  try {
    const { PrismaClientManager } = require('../../server/database/prisma');
    await PrismaClientManager.disconnect();
    console.log('‚úÖ „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Åó„Åæ„Åó„Åü');
  } catch (error) {
    console.error('‚ùå „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Ç®„É©„Éº:', error.message);
  }
  process.exit(0);
});

const { prisma } = require('../../server/database/prisma');
const { astronomicalCalculator } = require('../../server/services/AstronomicalCalculatorAstronomyEngine');

// ÂÖ±ÈÄöÂÆöÊï∞„Çí„Ç§„É≥„Éù„Éº„Éà
const { FUJI_COORDINATES } = require('../../shared/types');

/**
 * 2ÁÇπÈñì„ÅÆÊñπ‰ΩçËßí„ÇíË®àÁÆóÔºàÁêÉÈù¢‰∏âËßíÊ≥ïÔºâ
 */
function calculateAzimuth(lat1, lon1, lat2, lon2) {
  const toRad = (deg) => deg * Math.PI / 180;
  const toDeg = (rad) => rad * 180 / Math.PI;
  
  const dLon = toRad(lon2 - lon1);
  const lat1Rad = toRad(lat1);
  const lat2Rad = toRad(lat2);
  
  const y = Math.sin(dLon) * Math.cos(lat2Rad);
  const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) -
           Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(dLon);
  
  let azimuth = toDeg(Math.atan2(y, x));
  return (azimuth + 360) % 360; // 0-360Â∫¶„Å´Ê≠£Ë¶èÂåñ
}

/**
 * 2ÁÇπÈñì„ÅÆË∑ùÈõ¢„ÇíË®àÁÆóÔºàHaversine formulaÔºâ
 */
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // Âú∞ÁêÉ„ÅÆÂçäÂæÑÔºàkmÔºâ
  const toRad = (deg) => deg * Math.PI / 180;
  
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
            Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  
  return R * c;
}

/**
 * Âú∞ÁÇπ„Å´ÂØåÂ£´Â±±„Éá„Éº„Çø„ÇíË®≠ÂÆöÔºàÈ´òÁ≤æÂ∫¶ÁâàÔºâ
 */
async function setupLocationFujiData() {
  console.log('üóª Âú∞ÁÇπ„Å´ÂØåÂ£´Â±±„Éá„Éº„Çø„ÇíË®≠ÂÆö‰∏≠ÔºàÈ´òÁ≤æÂ∫¶Ë®àÁÆóÔºâ...');
  
  const locations = await prisma.location.findMany({
    where: {
      OR: [
        { fujiAzimuth: null },
        { fujiElevation: null },
        { fujiDistance: null }
      ]
    }
  });
  
  for (const location of locations) {
    // AstronomicalCalculatorAstronomyEngine„ÅÆÈ´òÁ≤æÂ∫¶Ë®àÁÆó„Çí‰ΩøÁî®
    const fujiAzimuth = astronomicalCalculator.calculateBearingToFuji(location);
    const fujiElevation = astronomicalCalculator.calculateElevationToFuji(location);
    const fujiDistance = astronomicalCalculator.calculateDistanceToFuji(location);
    
    await prisma.location.update({
      where: { id: location.id },
      data: {
        fujiAzimuth: Math.round(fujiAzimuth * 1000) / 1000,
        fujiElevation: Math.round(fujiElevation * 1000) / 1000,
        fujiDistance: Math.round(fujiDistance * 100) / 100
      }
    });
    
    console.log(`  ‚úÖ ${location.name}: Êñπ‰ΩçËßí${fujiAzimuth.toFixed(3)}¬∞, ‰ª∞Ëßí${fujiElevation.toFixed(6)}¬∞, Ë∑ùÈõ¢${fujiDistance.toFixed(1)}km`);
  }
}

/**
 * „ÉÄ„Ç§„É§„É¢„É≥„ÉâÂØåÂ£´„ÅÆÂà§ÂÆöÔºàÈ´òÁ≤æÂ∫¶ÁâàÔºâ
 */
function isDiamondFuji(celestialData, fujiAzimuth, fujiElevation, fujiDistance) {
  if (celestialData.celestialType !== 'sun') return false;
  
  // ÊôÇÈñìÂ∏Ø„ÅÆÁ¢∫Ë™çÔºàÊúùÔºö4-10ÊôÇ„ÄÅÂ§ïÔºö14-20ÊôÇÔºâ
  const hour = celestialData.hour;
  const isMorning = (hour >= 4 && hour < 10);
  const isEvening = (hour >= 14 && hour < 20);
  
  if (!isMorning && !isEvening) return false;
  
  // Ë∑ùÈõ¢„Å´Âøú„Åò„ÅüÊñπ‰ΩçËßíË®±ÂÆπÁØÑÂõ≤ÔºàÈ´òÁ≤æÂ∫¶Áâà„Å®Âêå„ÅòÔºâ
  let azimuthTolerance;
  if (fujiDistance <= 50) azimuthTolerance = 0.25;
  else if (fujiDistance <= 100) azimuthTolerance = 0.4;
  else azimuthTolerance = 0.6;
  
  // Êñπ‰ΩçËßí„ÅÆÂ∑Æ„ÇíË®àÁÆó
  const azimuthDiff = Math.abs(celestialData.azimuth - fujiAzimuth);
  const normalizedAzimuthDiff = Math.min(azimuthDiff, 360 - azimuthDiff);
  
  // ‰ª∞Ëßí„ÅÆÂ∑Æ„ÇíË®àÁÆóÔºà¬±0.25Â∫¶‰ª•ÂÜÖÔºâ
  const elevationDiff = Math.abs(celestialData.elevation - fujiElevation);
  
  return normalizedAzimuthDiff <= azimuthTolerance && elevationDiff <= 0.25;
}

/**
 * „Éë„Éº„É´ÂØåÂ£´„ÅÆÂà§ÂÆöÔºàÈ´òÁ≤æÂ∫¶ÁâàÔºâ
 */
function isPearlFuji(celestialData, fujiAzimuth, fujiElevation, fujiDistance) {
  if (celestialData.celestialType !== 'moon') return false;
  
  // Ë∑ùÈõ¢„Å´Âøú„Åò„Åü„Éë„Éº„É´ÂØåÂ£´Áî®Êñπ‰ΩçËßíË®±ÂÆπÁØÑÂõ≤Ôºà„ÉÄ„Ç§„É§„É¢„É≥„ÉâÂØåÂ£´„ÅÆ3-4ÂÄçÔºâ
  let azimuthTolerance;
  if (fujiDistance <= 50) azimuthTolerance = 1.0;
  else if (fujiDistance <= 100) azimuthTolerance = 2.0;
  else azimuthTolerance = 3.0;
  
  // Êñπ‰ΩçËßí„ÅÆÂ∑Æ„ÇíË®àÁÆó
  const azimuthDiff = Math.abs(celestialData.azimuth - fujiAzimuth);
  const normalizedAzimuthDiff = Math.min(azimuthDiff, 360 - azimuthDiff);
  
  // ‰ª∞Ëßí„ÅÆÂ∑Æ„ÇíË®àÁÆóÔºà¬±4.0Â∫¶‰ª•ÂÜÖÔºâ
  const elevationDiff = Math.abs(celestialData.elevation - fujiElevation);
  
  // Ê∫ÄÊúà„Å´Ëøë„ÅÑÔºàÁÖßÊòéÂ∫¶70%‰ª•‰∏äÔºâ„Åª„Å©ËâØ„ÅÑ
  return normalizedAzimuthDiff <= azimuthTolerance && 
         elevationDiff <= 4.0 &&
         celestialData.moonIllumination >= 0.7;
}

/**
 * ÂìÅË≥™Ë©ï‰æ°
 */
function evaluateQuality(azimuthDiff, elevationDiff, celestialType) {
  const totalDiff = Math.sqrt(azimuthDiff ** 2 + elevationDiff ** 2);
  
  if (celestialType === 'sun') {
    if (totalDiff <= 0.5) return 'perfect';
    if (totalDiff <= 1.0) return 'excellent';
    if (totalDiff <= 1.5) return 'good';
    return 'fair';
  } else { // moon
    if (totalDiff <= 1.0) return 'perfect';
    if (totalDiff <= 2.0) return 'excellent';
    if (totalDiff <= 3.0) return 'good';
    return 'fair';
  }
}

async function main() {
  console.log('üöÄ Âú∞ÁÇπÂà•ÂØåÂ£´ÁèæË±°„Ç§„Éô„É≥„ÉàÁîüÊàêÈñãÂßã - 2025Âπ¥„Éá„Éº„Çø');
  console.log('üìä celestial_orbit_data„Å®locations„Åã„Çâlocation_fuji_events„ÇíÁîüÊàê');
  console.log('‚è∞ Âá¶ÁêÜÊôÇÈñì: 10-15ÂàÜÁ®ãÂ∫¶„Åã„Åã„Çä„Åæ„Åô');
  console.log('');
  
  const startTime = Date.now();
  const year = 2025;
  
  try {
    // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÉÜ„Çπ„Éà
    console.log('üîç „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà‰∏≠...');
    const { PrismaClientManager } = require('../../server/database/prisma');
    const isConnected = await PrismaClientManager.testConnection();
    if (!isConnected) {
      throw new Error('„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Êé•Á∂ö„Åß„Åç„Åæ„Åõ„Çì');
    }
    console.log('‚úÖ „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öOK');
    
    console.log(`‚è∞ ${new Date().toLocaleString('ja-JP')} - Ë®àÁÆóÈñãÂßã`);
    
    // Step 1: Âú∞ÁÇπ„ÅÆÂØåÂ£´Â±±„Éá„Éº„Çø„ÇíË®≠ÂÆö
    await setupLocationFujiData();
    
    // Step 2: Êó¢Â≠ò„ÅÆÁèæË±°„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢
    const startDate = new Date(year, 0, 1);
    const endDate = new Date(year + 1, 0, 1);
    
    console.log('\nüóëÔ∏è  Êó¢Â≠ò„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢‰∏≠...');
    const deleteResult = await prisma.locationFujiEvent.deleteMany({
      where: {
        eventDate: {
          gte: startDate,
          lt: endDate
        }
      }
    });
    console.log(`‚úÖ ${deleteResult.count}‰ª∂„ÅÆÊó¢Â≠ò„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`);
    
    // Step 3: Âú∞ÁÇπ„ÇíÂèñÂæó
    console.log('\nüìç ÊíÆÂΩ±Âú∞ÁÇπ„ÇíÂèñÂæó‰∏≠...');
    const locations = await prisma.location.findMany({
      where: {
        fujiAzimuth: { not: null },
        fujiElevation: { not: null },
        fujiDistance: { not: null }
      }
    });
    
    console.log(`‚úÖ ${locations.length}Âú∞ÁÇπ„ÇíÂèñÂæó„Åó„Åæ„Åó„Åü`);
    
    let totalEvents = 0;
    let diamondEvents = 0;
    let pearlEvents = 0;
    
    // Step 4: ÂêÑÂú∞ÁÇπ„ÅßÂØåÂ£´ÁèæË±°„ÇíË®àÁÆó
    for (let i = 0; i < locations.length; i++) {
      const location = locations[i];
      console.log(`\nüìç Âú∞ÁÇπ ${i + 1}/${locations.length}: ${location.name}`);
      console.log(`   ÂØåÂ£´Â±± - Êñπ‰ΩçËßí: ${location.fujiAzimuth}¬∞, ‰ª∞Ëßí: ${location.fujiElevation}¬∞, Ë∑ùÈõ¢: ${location.fujiDistance}km`);
      
      // Â§©‰Ωì„Éá„Éº„Çø„ÇíÂèñÂæóÔºàÊñπ‰ΩçËßí„Éª‰ª∞Ëßí„ÅåËøë„ÅÑ„ÇÇ„ÅÆÔºâ
      const celestialData = await prisma.celestialOrbitData.findMany({
        where: {
          date: { gte: startDate, lt: endDate },
          azimuth: {
            gte: location.fujiAzimuth - 2.5,
            lte: location.fujiAzimuth + 2.5
          },
          elevation: {
            gte: location.fujiElevation - 2.0,
            lte: location.fujiElevation + 2.0
          },
          visible: true
        },
        orderBy: [{ date: 'asc' }, { time: 'asc' }]
      });
      
      console.log(`   Â§©‰Ωì„Éá„Éº„ÇøÂÄôË£ú: ${celestialData.length}‰ª∂`);
      
      let locationDiamondCount = 0;
      let locationPearlCount = 0;
      
      // ÂêÑÂ§©‰Ωì„Éá„Éº„Çø„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      for (const data of celestialData) {
        let eventType = null;
        let isEvent = false;
        
        // „ÉÄ„Ç§„É§„É¢„É≥„ÉâÂØåÂ£´Âà§ÂÆö
        if (isDiamondFuji(data, location.fujiAzimuth, location.fujiElevation, location.fujiDistance)) {
          eventType = data.hour < 12 ? 'diamond_sunrise' : 'diamond_sunset';
          isEvent = true;
          locationDiamondCount++;
          diamondEvents++;
        }
        // „Éë„Éº„É´ÂØåÂ£´Âà§ÂÆö
        else if (isPearlFuji(data, location.fujiAzimuth, location.fujiElevation, location.fujiDistance)) {
          eventType = 'pearl_moonrise'; // Á∞°ÊòìÂÆüË£Ö
          isEvent = true;
          locationPearlCount++;
          pearlEvents++;
        }
        
        if (isEvent) {
          const azimuthDiff = Math.abs(data.azimuth - location.fujiAzimuth);
          const elevationDiff = Math.abs(data.elevation - location.fujiElevation);
          const qualityScore = Math.max(0, 1.0 - (azimuthDiff * 0.3 + elevationDiff * 0.4));
          const accuracy = evaluateQuality(azimuthDiff, elevationDiff, data.celestialType);
          
          await prisma.locationFujiEvent.create({
            data: {
              locationId: location.id,
              eventDate: data.date,
              eventTime: data.time,
              eventType,
              azimuth: data.azimuth,
              altitude: data.elevation,
              qualityScore,
              accuracy,
              moonPhase: data.moonPhase,
              moonIllumination: data.moonIllumination,
              calculationYear: year
            }
          });
          
          totalEvents++;
        }
      }
      
      console.log(`   ‚úÖ „ÉÄ„Ç§„É§„É¢„É≥„ÉâÂØåÂ£´: ${locationDiamondCount}‰ª∂, „Éë„Éº„É´ÂØåÂ£´: ${locationPearlCount}‰ª∂`);
    }
    
    const totalTime = Date.now() - startTime;
    const totalMinutes = Math.round(totalTime / 1000 / 60 * 10) / 10;
    
    console.log('\nüéâ Âú∞ÁÇπÂà•ÂØåÂ£´ÁèæË±°„Ç§„Éô„É≥„ÉàÁîüÊàêÂÆå‰∫ÜÔºÅ');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`Âπ¥Â∫¶: ${year}`);
    console.log(`Á∑èÂÆüË°åÊôÇÈñì: ${totalMinutes}ÂàÜ`);
    console.log(`ÂØæË±°Âú∞ÁÇπÊï∞: ${locations.length}Âú∞ÁÇπ`);
    console.log(`ÊúÄÁµÇ„Ç§„Éô„É≥„ÉàÊï∞: ${totalEvents.toLocaleString()}‰ª∂`);
    console.log(`„ÉÄ„Ç§„É§„É¢„É≥„ÉâÂØåÂ£´: ${diamondEvents.toLocaleString()}‰ª∂`);
    console.log(`„Éë„Éº„É´ÂØåÂ£´: ${pearlEvents.toLocaleString()}‰ª∂`);
    console.log(`Âπ≥Âùá„Ç§„Éô„É≥„ÉàÊï∞/Âú∞ÁÇπ: ${Math.round(totalEvents / locations.length)}‰ª∂`);
    console.log('\n‚úÖ location_fuji_events„ÉÜ„Éº„Éñ„É´„ÅÆÊ∫ñÂÇô„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ');
    
  } catch (error) {
    const totalTime = Date.now() - startTime;
    const totalMinutes = Math.round(totalTime / 1000 / 60 * 10) / 10;
    
    console.error('\nüí• Âú∞ÁÇπÂà•ÂØåÂ£´ÁèæË±°„Ç§„Éô„É≥„ÉàÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    console.error(`ÂÆüË°åÊôÇÈñì: ${totalMinutes}ÂàÜ`);
    console.error('„Ç®„É©„ÉºË©≥Á¥∞:', error.message);
    console.error('„Çπ„Çø„ÉÉ„ÇØ„Éà„É¨„Éº„Çπ:');
    console.error(error.stack);
    
    process.exit(1);
  } finally {
    // ÊúÄÁµÇ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    try {
      const { PrismaClientManager } = require('../../server/database/prisma');
      await PrismaClientManager.disconnect();
    } catch (error) {
      // ÁÑ°Ë¶ñ
    }
  }
}

console.log('‚ö†Ô∏è  Ê≥®ÊÑè: „Åì„ÅÆÂá¶ÁêÜ„ÅØ10-15ÂàÜÁ®ãÂ∫¶ÊôÇÈñì„Åå„Åã„Åã„Çä„Åæ„Åô');
console.log('üìä celestial_orbit_data„Å®locations„Åã„Çâlocation_fuji_events„ÇíÁõ¥Êé•ÁîüÊàê„Åó„Åæ„Åô');
console.log('üóª Âú∞ÁÇπ„ÅÆÂØåÂ£´Â±±„Éá„Éº„Çø„ÇÇËá™ÂãïË®≠ÂÆö„Åï„Çå„Åæ„Åô');
console.log('üöÄ Ëá™ÂãïÈñãÂßã...');
console.log('');

main();