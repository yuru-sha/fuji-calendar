import SunCalc from 'suncalc';
import { Location, FujiEvent, SunPosition, MoonPosition, FUJI_COORDINATES } from '../../shared/types';
import { timeUtils } from '../../shared/utils/timeUtils';

export interface AstronomicalCalculator {
  calculateDiamondFuji(date: Date, locations: Location[]): FujiEvent[];
  calculatePearlFuji(date: Date, locations: Location[]): FujiEvent[];
  getSunPosition(date: Date, latitude: number, longitude: number): SunPosition;
  getMoonPosition(date: Date, latitude: number, longitude: number): MoonPosition;
  calculateAzimuthToFuji(fromLocation: Location): number;
  isVisible(fromLocation: Location, targetAzimuth: number): boolean;
}

export class AstronomicalCalculatorImpl implements AstronomicalCalculator {
  
  // 度をラジアンに変換
  private toRadians(degrees: number): number {
    return degrees * (Math.PI / 180);
  }

  // ラジアンを度に変換
  private toDegrees(radians: number): number {
    return radians * (180 / Math.PI);
  }

  // 撮影地点から富士山への方位角を計算
  calculateAzimuthToFuji(fromLocation: Location): number {
    const lat1 = this.toRadians(fromLocation.latitude);
    const lat2 = this.toRadians(FUJI_COORDINATES.latitude);
    const deltaLon = this.toRadians(FUJI_COORDINATES.longitude - fromLocation.longitude);
    
    const y = Math.sin(deltaLon) * Math.cos(lat2);
    const x = Math.cos(lat1) * Math.sin(lat2) - 
              Math.sin(lat1) * Math.cos(lat2) * Math.cos(deltaLon);
    
    let bearing = this.toDegrees(Math.atan2(y, x));
    return (bearing + 360) % 360; // 0-360度の範囲に正規化
  }

  // 2地点間の距離を計算（km）
  private calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
    const R = 6371; // 地球の半径（km）
    const dLat = this.toRadians(lat2 - lat1);
    const dLon = this.toRadians(lon2 - lon1);
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  }

  // 富士山の角度サイズを計算（標高を考慮）
  private calculateFujiAngularSize(fromLocation: Location): number {
    const distance = this.calculateDistance(
      fromLocation.latitude, fromLocation.longitude,
      FUJI_COORDINATES.latitude, FUJI_COORDINATES.longitude
    );
    
    // 富士山の高さ（海抜からの高さ）
    const fujiHeight = FUJI_COORDINATES.elevation - fromLocation.elevation;
    
    // 角度サイズ（度）
    return this.toDegrees(Math.atan(fujiHeight / (distance * 1000)));
  }

  // 太陽の位置を取得
  getSunPosition(date: Date, latitude: number, longitude: number): SunPosition {
    // SunCalcはUTC時刻を期待するため、JSTからUTCに変換
    const utcDate = timeUtils.jstToUtc(date);
    
    const sunPos = SunCalc.getPosition(utcDate, latitude, longitude);
    const sunTimes = SunCalc.getTimes(utcDate, latitude, longitude);
    
    // SunCalcの方位角を正しく変換（南を0度 → 北を0度）
    // SunCalcの方位角: -PI（北）から PI（北）、0が南
    // 一般的な方位角: 0度（北）から360度（北）、90度が東、180度が南、270度が西
    let azimuthDegrees = this.toDegrees(sunPos.azimuth);
    azimuthDegrees = (azimuthDegrees + 180) % 360; // 南を0度から北を0度に変換（精度向上）
    if (azimuthDegrees < 0) azimuthDegrees += 360; // 負の値を正規化
    
    return {
      azimuth: azimuthDegrees,
      elevation: this.toDegrees(sunPos.altitude),
      sunrise: timeUtils.utcToJst(sunTimes.sunrise),
      sunset: timeUtils.utcToJst(sunTimes.sunset)
    };
  }

  // 月の位置を取得
  getMoonPosition(date: Date, latitude: number, longitude: number): MoonPosition {
    // SunCalcはUTC時刻を期待するため、JSTからUTCに変換
    const utcDate = timeUtils.jstToUtc(date);
    
    const moonPos = SunCalc.getMoonPosition(utcDate, latitude, longitude);
    const moonTimes = SunCalc.getMoonTimes(utcDate, latitude, longitude);
    const moonIllum = SunCalc.getMoonIllumination(utcDate);
    
    // 月の方位角も太陽と同様に変換
    let azimuthDegrees = this.toDegrees(moonPos.azimuth);
    azimuthDegrees = (azimuthDegrees + 180) % 360; // 南を0度から北を0度に変換（精度向上）
    if (azimuthDegrees < 0) azimuthDegrees += 360; // 負の値を正規化
    
    return {
      azimuth: azimuthDegrees,
      elevation: this.toDegrees(moonPos.altitude),
      moonrise: moonTimes.rise ? timeUtils.utcToJst(moonTimes.rise) : new Date(0),
      moonset: moonTimes.set ? timeUtils.utcToJst(moonTimes.set) : new Date(0),
      phase: moonIllum.fraction
    };
  }

  // 富士山が見える方向かどうかを判定
  isVisible(fromLocation: Location, targetAzimuth: number): boolean {
    const fujiAzimuth = this.calculateAzimuthToFuji(fromLocation);
    const angleDifference = Math.abs(targetAzimuth - fujiAzimuth);
    
    // 角度差が正規化されるよう調整（例：359度と1度の差は2度）
    const normalizedDifference = Math.min(angleDifference, 360 - angleDifference);
    
    // 富士山の角度サイズを考慮した許容範囲
    const fujiAngularSize = this.calculateFujiAngularSize(fromLocation);
    const tolerance = Math.max(fujiAngularSize / 2, 0.5); // 最小0.5度の許容範囲
    
    return normalizedDifference <= tolerance;
  }

  // 指定された方位角に太陽/月が来る時刻を精密計算
  private findExactTimeForAzimuth(
    date: Date, 
    location: Location, 
    targetAzimuth: number, 
    isRising: boolean,
    celestialBody: 'sun' | 'moon'
  ): Date | null {
    // 検索開始時刻を設定
    const searchDate = new Date(date);
    const startHour = isRising ? 4 : 14; // 日の出は4時から、日の入りは14時から検索
    const endHour = isRising ? 12 : 20;   // 日の出は12時まで、日の入りは20時まで検索
    
    let bestTime: Date | null = null;
    let minDifference = 360;
    
    // 10秒刻みで検索（精度向上）
    for (let hour = startHour; hour <= endHour; hour++) {
      for (let minute = 0; minute < 60; minute++) {
        for (let second = 0; second < 60; second += 10) {
          const checkTime = new Date(searchDate);
          checkTime.setHours(hour, minute, second, 0);
          
          let position;
          if (celestialBody === 'sun') {
            position = this.getSunPosition(checkTime, location.latitude, location.longitude);
          } else {
            position = this.getMoonPosition(checkTime, location.latitude, location.longitude);
          }
          
          // 高度が-2度以上（地平線下2度まで許可）で、方位角の差を計算
          if (position.elevation > -2) {
            // 方位角の差を精密計算（円周上の最短距離）
            let azimuthDiff = Math.abs(position.azimuth - targetAzimuth);
            if (azimuthDiff > 180) {
              azimuthDiff = 360 - azimuthDiff;
            }
            
            if (azimuthDiff < minDifference) {
              minDifference = azimuthDiff;
              bestTime = new Date(checkTime);
              console.log(`[DEBUG] 新しい最良時刻: ${checkTime.toLocaleTimeString('ja-JP')}, 方位角差: ${azimuthDiff.toFixed(2)}度, 太陽方位角: ${position.azimuth.toFixed(1)}度, 高度: ${position.elevation.toFixed(1)}度`);
            }
          }
        }
      }
    }
    
    // 許容範囲内（1.5度以内）であれば有効とする（ダイヤモンド富士の精度向上）
    console.log(`[DEBUG] 最小方位角差: ${minDifference.toFixed(2)}度, 許容範囲: 1.5度`);
    const result = minDifference <= 1.5 ? bestTime : null;
    console.log(`[DEBUG] 判定結果: ${result ? 'SUCCESS' : 'FAIL'}, bestTime: ${bestTime ? bestTime.toLocaleTimeString('ja-JP') : 'null'}`);
    return result;
  }

  // ダイヤモンド富士を計算
  calculateDiamondFuji(date: Date, locations: Location[]): FujiEvent[] {
    const events: FujiEvent[] = [];
    console.log(`[DIAMOND] Calculating diamond fuji for ${date.toDateString()}`);
    
    for (const location of locations) {
      const fujiAzimuth = this.calculateAzimuthToFuji(location);
      console.log(`[DIAMOND] ${location.name}: 富士山方位角 ${fujiAzimuth.toFixed(1)}度`);
      
      // 日の出時のダイヤモンド富士（太陽が富士山の方向から昇る）
      const sunriseTime = this.findExactTimeForAzimuth(date, location, fujiAzimuth, true, 'sun');
      if (sunriseTime) {
        const sunrisePosition = this.getSunPosition(sunriseTime, location.latitude, location.longitude);
        console.log(`[DEBUG] ${location.name}: 昇るダイヤモンド富士 ${sunriseTime.toLocaleTimeString('ja-JP')} (方位角: ${sunrisePosition.azimuth.toFixed(1)}度)`);
        events.push({
          id: `diamond-rising-${location.id}-${timeUtils.formatDateString(date)}`,
          type: 'diamond',
          subType: 'rising',
          time: sunriseTime,
          location: location,
          azimuth: sunrisePosition.azimuth,
          elevation: sunrisePosition.elevation
        });
      }
      
      // 日没時のダイヤモンド富士（太陽が富士山の方向に沈む）
      console.log(`[DIAMOND] ${location.name}: 沈む太陽を検索中... (目標方位角: ${fujiAzimuth.toFixed(1)}度)`);
      const sunsetTime = this.findExactTimeForAzimuth(date, location, fujiAzimuth, false, 'sun');
      console.log(`[DIAMOND] ${location.name}: 沈む太陽の結果: ${sunsetTime ? sunsetTime.toLocaleTimeString('ja-JP') : 'なし'}`);
      if (sunsetTime) {
        const sunsetPosition = this.getSunPosition(sunsetTime, location.latitude, location.longitude);
        console.log(`[DIAMOND] ${location.name}: 沈むダイヤモンド富士 ${sunsetTime.toLocaleTimeString('ja-JP')} (方位角: ${sunsetPosition.azimuth.toFixed(1)}度)`);
        const diamondEvent = {
          id: `diamond-setting-${location.id}-${timeUtils.formatDateString(date)}`,
          type: 'diamond' as const,
          subType: 'setting' as const,
          time: sunsetTime,
          location: location,
          azimuth: sunsetPosition.azimuth,
          elevation: sunsetPosition.elevation
        };
        console.log(`[EVENT] Created diamond event:`, diamondEvent);
        events.push(diamondEvent);
      }
    }
    
    return events;
  }

  // パール富士を計算
  calculatePearlFuji(date: Date, locations: Location[]): FujiEvent[] {
    const events: FujiEvent[] = [];
    
    for (const location of locations) {
      const fujiAzimuth = this.calculateAzimuthToFuji(location);
      
      // 月の出時のパール富士（月が富士山の方向から昇る）
      const moonriseTime = this.findExactTimeForAzimuth(date, location, fujiAzimuth, true, 'moon');
      if (moonriseTime) {
        const moonrisePosition = this.getMoonPosition(moonriseTime, location.latitude, location.longitude);
        // 月の満ち欠けを考慮（10%以上で表示）
        if (moonrisePosition.phase > 0.1) {
          events.push({
            id: `pearl-rising-${location.id}-${timeUtils.formatDateString(date)}`,
            type: 'pearl',
            subType: 'rising',
            time: moonriseTime,
            location: location,
            azimuth: moonrisePosition.azimuth,
            elevation: moonrisePosition.elevation
          });
        }
      }
      
      // 月没時のパール富士（月が富士山の方向に沈む）
      const moonsetTime = this.findExactTimeForAzimuth(date, location, fujiAzimuth, false, 'moon');
      if (moonsetTime) {
        const moonsetPosition = this.getMoonPosition(moonsetTime, location.latitude, location.longitude);
        // 月の満ち欠けを考慮（5%以上で表示）
        if (moonsetPosition.phase > 0.05) {
          console.log(`[PEARL] ${location.name}: 沈むパール富士 ${moonsetTime.toLocaleTimeString('ja-JP')} (方位角: ${moonsetPosition.azimuth.toFixed(1)}度, 月相: ${(moonsetPosition.phase * 100).toFixed(1)}%)`);
          events.push({
            id: `pearl-setting-${location.id}-${timeUtils.formatDateString(date)}`,
            type: 'pearl',
            subType: 'setting',
            time: moonsetTime,
            location: location,
            azimuth: moonsetPosition.azimuth,
            elevation: moonsetPosition.elevation
          });
        }
      }
    }
    
    return events;
  }

  // 月間のイベントを計算
  calculateMonthlyEvents(year: number, month: number, locations: Location[]): FujiEvent[] {
    try {
      const events: FujiEvent[] = [];
      const startDate = timeUtils.getMonthStart(year, month);
      const endDate = timeUtils.getMonthEnd(year, month);
      
      console.log(`Calculating events from ${startDate.toISOString()} to ${endDate.toISOString()}`);
      
      for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
        const dailyDate = new Date(date);
        
        try {
          // ダイヤモンド富士を計算
          const diamondEvents = this.calculateDiamondFuji(dailyDate, locations);
          events.push(...diamondEvents);
          
          // パール富士を計算
          const pearlEvents = this.calculatePearlFuji(dailyDate, locations);
          events.push(...pearlEvents);
        } catch (dayError) {
          console.error(`Error calculating events for ${dailyDate.toISOString()}:`, dayError);
          // 個別の日のエラーはスキップして続行
        }
      }
      
      console.log(`Successfully calculated ${events.length} total events`);
      return events;
    } catch (error) {
      console.error('Error in calculateMonthlyEvents:', error);
      return []; // エラーの場合は空配列を返す
    }
  }

  // 年間の主要イベントを計算（パフォーマンス最適化版）
  calculateYearlyEvents(year: number, locations: Location[]): FujiEvent[] {
    const events: FujiEvent[] = [];
    
    // 月ごとに計算
    for (let month = 1; month <= 12; month++) {
      const monthlyEvents = this.calculateMonthlyEvents(year, month, locations);
      events.push(...monthlyEvents);
    }
    
    return events;
  }
}

// シングルトンインスタンス
export const astronomicalCalculator = new AstronomicalCalculatorImpl();