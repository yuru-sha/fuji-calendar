/**
 * Âçò‰∏ÄÂú∞ÁÇπ„Åß„ÅÆÂØåÂ£´ÁèæË±°„Ç§„Éô„É≥„ÉàË®àÁÆó„ÉÜ„Çπ„Éà
 * „Éó„É≠„Çª„Çπ„ÅåËêΩ„Å°„Å™„ÅÑ„Çà„ÅÜÂ∞èË¶èÊ®°„Åß„ÉÜ„Çπ„Éà
 */

const { PrismaClientManager } = require('./src/server/database/prisma');

async function testSingleLocation() {
  console.log('üß™ Âçò‰∏ÄÂú∞ÁÇπ„Åß„ÅÆÂØåÂ£´ÁèæË±°„Ç§„Éô„É≥„ÉàË®àÁÆó„ÉÜ„Çπ„Éà');
  
  try {
    const prisma = PrismaClientManager.getInstance();
    
    // Êµ∑„Åª„Åü„ÇãPAÂåóÂ≤∏‰ªòËøë„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
    const location = await prisma.location.findFirst({
      where: {
        name: {
          contains: 'Êµ∑„Åª„Åü„ÇãPAÂåóÂ≤∏'
        }
      }
    });
    
    if (!location) {
      console.log('‚ùå Êµ∑„Åª„Åü„ÇãPAÂåóÂ≤∏‰ªòËøë„ÅÆÂú∞ÁÇπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      return;
    }
    
    console.log('üìç „ÉÜ„Çπ„ÉàÂú∞ÁÇπ:', location.name);
    console.log('   Â∫ßÊ®ô:', `${location.latitude}, ${location.longitude}`);
    console.log('   Ê®ôÈ´ò:', `${location.elevation}m`);
    console.log('   ÂØåÂ£´Â±±Êñπ‰ΩçËßí:', `${location.fujiAzimuth}¬∞`);
    console.log('   ÂØåÂ£´Â±±‰ª∞Ëßí:', `${location.fujiElevation}¬∞`);
    console.log('   ÂØåÂ£´Â±±Ë∑ùÈõ¢:', `${location.fujiDistance}km`);
    console.log('');
    
    // 2025Âπ¥2Êúà15Êó•„ÅÆÂ§©‰Ωì„Éá„Éº„Çø„ÇíÁ¢∫Ë™çÔºà1Êó•ÂàÜ„ÅÆ„ÅøÔºâ
    const testDate = new Date('2025-02-15');
    const nextDate = new Date('2025-02-16');
    
    console.log('üîç Â§©‰Ωì„Éá„Éº„ÇøÊ§úÁ¥¢Êù°‰ª∂:');
    console.log('   Êó•‰ªò:', testDate.toISOString().split('T')[0]);
    console.log('   Êñπ‰ΩçËßíÁØÑÂõ≤:', `${location.fujiAzimuth - 10}¬∞ ÔΩû ${location.fujiAzimuth + 10}¬∞`);
    console.log('   ‰ª∞ËßíÁØÑÂõ≤:', `${location.fujiElevation - 5}¬∞ ÔΩû ${location.fujiElevation + 5}¬∞`);
    console.log('');
    
    // Â§©‰Ωì„Éá„Éº„Çø„ÇíÊ§úÁ¥¢
    const celestialData = await prisma.celestialOrbitData.findMany({
      where: {
        date: { gte: testDate, lt: nextDate },
        azimuth: {
          gte: location.fujiAzimuth - 10.0,
          lte: location.fujiAzimuth + 10.0
        },
        elevation: {
          gte: location.fujiElevation - 5.0,
          lte: location.fujiElevation + 5.0
        },
        visible: true
      },
      orderBy: [{ time: 'asc' }],
      take: 20 // ÊúÄÂ§ß20‰ª∂„Å´Âà∂Èôê
    });
    
    console.log(`üìä ÂÄôË£úÂ§©‰Ωì„Éá„Éº„Çø: ${celestialData.length}‰ª∂`);
    
    if (celestialData.length === 0) {
      console.log('‚ùå Êù°‰ª∂„Å´Âêà„ÅÜÂ§©‰Ωì„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      
      // visible=true„ÅÆ„Éá„Éº„ÇøÁ∑èÊï∞„ÇíÁ¢∫Ë™ç
      const visibleCount = await prisma.celestialOrbitData.count({
        where: { visible: true }
      });
      console.log(`   visible=true„ÅÆ„Éá„Éº„ÇøÁ∑èÊï∞: ${visibleCount}‰ª∂`);
      
      // Ë©≤ÂΩìÊó•„ÅÆ„Éá„Éº„ÇøÁ∑èÊï∞„ÇíÁ¢∫Ë™ç
      const dayCount = await prisma.celestialOrbitData.count({
        where: {
          date: { gte: testDate, lt: nextDate }
        }
      });
      console.log(`   Ë©≤ÂΩìÊó•„ÅÆ„Éá„Éº„ÇøÁ∑èÊï∞: ${dayCount}‰ª∂`);
      
      return;
    }
    
    // ÂÄôË£ú„Éá„Éº„Çø„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
    console.log('');
    console.log('üìã ÂÄôË£ú„Éá„Éº„ÇøË©≥Á¥∞:');
    celestialData.forEach((data, index) => {
      const jstTime = new Date(data.time.getTime() + 9 * 60 * 60 * 1000);
      const azimuthDiff = Math.abs(data.azimuth - location.fujiAzimuth);
      const elevationDiff = Math.abs(data.elevation - location.fujiElevation);
      
      console.log(`${index + 1}. ${data.celestialType} ${jstTime.getHours()}:${jstTime.getMinutes().toString().padStart(2, '0')}`);
      console.log(`   Êñπ‰ΩçËßí: ${data.azimuth.toFixed(2)}¬∞ (Â∑Æ: ${azimuthDiff.toFixed(2)}¬∞)`);
      console.log(`   ‰ª∞Ëßí: ${data.elevation.toFixed(2)}¬∞ (Â∑Æ: ${elevationDiff.toFixed(2)}¬∞)`);
      console.log(`   visible: ${data.visible}`);
    });
    
    // „ÉÄ„Ç§„É§„É¢„É≥„ÉâÂØåÂ£´„ÅÆÂà§ÂÆö„ÉÜ„Çπ„Éà
    console.log('');
    console.log('üîç „ÉÄ„Ç§„É§„É¢„É≥„ÉâÂØåÂ£´Âà§ÂÆö„ÉÜ„Çπ„Éà:');
    const diamondCandidates = celestialData.filter(data => {
      if (data.celestialType !== 'sun') return false;
      
      const hour = new Date(data.time.getTime() + 9 * 60 * 60 * 1000).getHours();
      const isMorning = (hour >= 4 && hour < 12);
      const isEvening = (hour >= 12 && hour < 20);
      
      if (!isMorning && !isEvening) return false;
      
      const azimuthDiff = Math.abs(data.azimuth - location.fujiAzimuth);
      const elevationDiff = Math.abs(data.elevation - location.fujiElevation);
      
      const azimuthTolerance = location.fujiDistance <= 50 ? 0.25 : 
                              location.fujiDistance <= 100 ? 0.4 : 0.6;
      
      return azimuthDiff <= azimuthTolerance && elevationDiff <= 0.25;
    });
    
    console.log(`   „ÉÄ„Ç§„É§„É¢„É≥„ÉâÂØåÂ£´ÂÄôË£ú: ${diamondCandidates.length}‰ª∂`);
    diamondCandidates.forEach(data => {
      const jstTime = new Date(data.time.getTime() + 9 * 60 * 60 * 1000);
      console.log(`   ‚úÖ ${jstTime.getHours()}:${jstTime.getMinutes().toString().padStart(2, '0')} Êñπ‰ΩçËßí${data.azimuth.toFixed(2)}¬∞ ‰ª∞Ëßí${data.elevation.toFixed(2)}¬∞`);
    });
    
    // „Éë„Éº„É´ÂØåÂ£´„ÅÆÂà§ÂÆö„ÉÜ„Çπ„Éà
    console.log('');
    console.log('üåô „Éë„Éº„É´ÂØåÂ£´Âà§ÂÆö„ÉÜ„Çπ„Éà:');
    const pearlCandidates = celestialData.filter(data => {
      if (data.celestialType !== 'moon') return false;
      
      const azimuthDiff = Math.abs(data.azimuth - location.fujiAzimuth);
      const elevationDiff = Math.abs(data.elevation - location.fujiElevation);
      
      const azimuthTolerance = location.fujiDistance <= 50 ? 1.0 : 
                              location.fujiDistance <= 100 ? 2.0 : 3.0;
      
      return azimuthDiff <= azimuthTolerance && 
             elevationDiff <= 4.0 &&
             (data.moonIllumination >= 0.5 || data.moonIllumination === null);
    });
    
    console.log(`   „Éë„Éº„É´ÂØåÂ£´ÂÄôË£ú: ${pearlCandidates.length}‰ª∂`);
    pearlCandidates.forEach(data => {
      const jstTime = new Date(data.time.getTime() + 9 * 60 * 60 * 1000);
      console.log(`   ‚úÖ ${jstTime.getHours()}:${jstTime.getMinutes().toString().padStart(2, '0')} Êñπ‰ΩçËßí${data.azimuth.toFixed(2)}¬∞ ‰ª∞Ëßí${data.elevation.toFixed(2)}¬∞ ÁÖßÂ∫¶${data.moonIllumination?.toFixed(2) || 'N/A'}`);
    });
    
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
  } finally {
    await PrismaClientManager.disconnect();
  }
}

testSingleLocation();